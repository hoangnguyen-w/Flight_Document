// <auto-generated />
using System;
using Flight_Document.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flight_Document.Migrations
{
    [DbContext(typeof(FlightManagerContext))]
    [Migration("20231204032421_UpdateTableAccount")]
    partial class UpdateTableAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Flight_Document.Entity.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StatusTerminate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountID");

                    b.HasIndex("GroupID");

                    b.HasIndex("RoleID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Flight_Document.Entity.Document", b =>
                {
                    b.Property<Guid>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateDocument")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("DocumentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("DocumentTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlightNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Version")
                        .HasColumnType("real");

                    b.HasKey("DocumentID");

                    b.HasIndex("DocumentTypeID");

                    b.HasIndex("FlightNo");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Flight_Document.Entity.DocumentType", b =>
                {
                    b.Property<Guid>("DocumentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DocumentTypeID");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Flight_Document.Entity.Flight", b =>
                {
                    b.Property<string>("FlightNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Router")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SecondLocationID")
                        .HasColumnType("int");

                    b.HasKey("FlightNo");

                    b.HasIndex("LocationID");

                    b.ToTable("Flight");
                });

            modelBuilder.Entity("Flight_Document.Entity.Group", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateGroup")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Flight_Document.Entity.GroupPermission", b =>
                {
                    b.Property<Guid>("GroupPermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusPermission")
                        .HasColumnType("int");

                    b.HasKey("GroupPermissionID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupPermission");
                });

            modelBuilder.Entity("Flight_Document.Entity.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Flight_Document.Entity.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("987dc002-2098-457c-80b3-c76cdc11093a"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("00ed25ec-76c3-4015-be70-08a790097bfa"),
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = new Guid("3ee909e3-05b1-41a2-b6ad-5e496ea411ae"),
                            RoleName = "Pilot"
                        },
                        new
                        {
                            RoleId = new Guid("46118d1e-f265-434c-93d6-b9ce999c1a52"),
                            RoleName = "Stewardess"
                        });
                });

            modelBuilder.Entity("Flight_Document.Entity.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusCapcha")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Flight_Document.Entity.Account", b =>
                {
                    b.HasOne("Flight_Document.Entity.Group", "Group")
                        .WithMany("Accounts")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Document.Entity.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Flight_Document.Entity.Document", b =>
                {
                    b.HasOne("Flight_Document.Entity.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Document.Entity.Flight", "Flight")
                        .WithMany("Documents")
                        .HasForeignKey("FlightNo");

                    b.Navigation("DocumentType");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Flight_Document.Entity.Flight", b =>
                {
                    b.HasOne("Flight_Document.Entity.Location", "Location")
                        .WithMany("Flights")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Flight_Document.Entity.GroupPermission", b =>
                {
                    b.HasOne("Flight_Document.Entity.Document", "Document")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flight_Document.Entity.Group", "Group")
                        .WithMany("GroupPermissions")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Flight_Document.Entity.Setting", b =>
                {
                    b.HasOne("Flight_Document.Entity.Account", "Account")
                        .WithMany("Settings")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Flight_Document.Entity.Account", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Flight_Document.Entity.Document", b =>
                {
                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("Flight_Document.Entity.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Flight_Document.Entity.Flight", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Flight_Document.Entity.Group", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("GroupPermissions");
                });

            modelBuilder.Entity("Flight_Document.Entity.Location", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Flight_Document.Entity.Role", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
